const passport = require('passport');const LocalStrategy = require('passport-local').Strategy;const sql = require('mssql');const bcrypt = require('bcrypt');const dbConfig = require('../config/database');const getUserById = async id => {  try {    const pool = await sql.connect(dbConfig);    const result = await pool.request()      .input('id', sql.Int, id)      .query('SELECT * FROM Users WHERE Id = @id');    return result.recordset[0];  } catch (error) {    console.error('Error getting user:', error);    return null;  }};const getUserByUsername = async username => {  try {    const pool = await sql.connect(dbConfig);    const result = await pool.request()      .input('username', sql.NVarChar, username)      .query('SELECT * FROM Users WHERE Username = @username');    return result.recordset[0];  } catch (error) {    console.error('Error getting user:', error);    return null;  }};passport.use(new LocalStrategy(  async (username, password, done) => {    try {      const user = await getUserByUsername(username);      if (!user) {        return done(null, false, { message: 'No user with that username' });      }      const passwordMatch = await bcrypt.compare(password, user.Password);      if (passwordMatch) {        return done(null, user);      } else {        return done(null, false, { message: 'Password incorrect' });      }    } catch (error) {      return done(error);    }  }));passport.serializeUser((user, done) => {  console.log('Serializing user:', user); // Dodaj log tutaj  done(null, user.Id);});passport.deserializeUser((id, done) => {  console.log('Deserializing user with id:', id);  getUserById(id)    .then(user => {      console.log('User deserialized:', user);      done(null, user);    })    .catch(error => done(error));});// todo: Ogarnąć usera - tworzenie konta od zera + update danych. I połączyć to z appką.